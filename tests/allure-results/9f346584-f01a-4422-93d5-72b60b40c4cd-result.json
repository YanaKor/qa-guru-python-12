{"name": "test_fill_authorization_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', \"label[for='hobbies-checkbox-3']\")).click\n\nReason: ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-3\" class=\"custom-control-label\">...</label> is not clickable at point (626, 526). Other element would receive the click: <span>...</span>\n  (Session info: chrome=118.0.5993.71)\nStacktrace:\n\tGetHandleVerifier [0x01174DE3+43907]\n\t(No symbol) [0x01100741]\n\t(No symbol) [0x00FF33ED]\n\t(No symbol) [0x0102B5B1]\n\t(No symbol) [0x0102A0AF]\n\t(No symbol) [0x0102869B]\n\t(No symbol) [0x01027A35]\n\t(No symbol) [0x0101FF9A]\n\t(No symbol) [0x01042B5C]\n\t(No symbol) [0x0101F9D6]\n\t(No symbol) [0x01042DD4]\n\t(No symbol) [0x010555CA]\n\t(No symbol) [0x01042956]\n\t(No symbol) [0x0101E17E]\n\t(No symbol) [0x0101F32D]\n\tGetHandleVerifier [0x01425AF9+2865305]\n\tGetHandleVerifier [0x0146E78B+3163435]\n\tGetHandleVerifier [0x01468441+3138017]\n\tGetHandleVerifier [0x011FE0F0+605840]\n\t(No symbol) [0x0110A64C]\n\t(No symbol) [0x01106638]\n\t(No symbol) [0x0110675F]\n\t(No symbol) [0x010F8DB7]\n\tBaseThreadInitThunk [0x753A6359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77497B74+228]\n\tRtlGetAppContainerNamedObjectPath [0x77497B44+180]\n\nScreenshot: file://C:\\Users\\veryu\\.selene\\screenshots\\1697566592041\\1697566592041.png\nPageSource: file://C:\\Users\\veryu\\.selene\\screenshots\\1697566592041\\1697566592041.html", "trace": "fn = <selene.core.wait.Command object at 0x000001B735B0D6F0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\entity.py:529: in raw_click\n    element.locate().click()\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B735B0C340>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77497B74+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77497B44+180]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-3\" class=\"custom-control-label\">...</label> is not clickable at point (626, 526). Other element would receive the click: <span>...</span>\nE         (Session info: chrome=118.0.5993.71)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x01174DE3+43907]\nE       \t(No symbol) [0x01100741]\nE       \t(No symbol) [0x00FF33ED]\nE       \t(No symbol) [0x0102B5B1]\nE       \t(No symbol) [0x0102A0AF]\nE       \t(No symbol) [0x0102869B]\nE       \t(No symbol) [0x01027A35]\nE       \t(No symbol) [0x0101FF9A]\nE       \t(No symbol) [0x01042B5C]\nE       \t(No symbol) [0x0101F9D6]\nE       \t(No symbol) [0x01042DD4]\nE       \t(No symbol) [0x010555CA]\nE       \t(No symbol) [0x01042956]\nE       \t(No symbol) [0x0101E17E]\nE       \t(No symbol) [0x0101F32D]\nE       \tGetHandleVerifier [0x01425AF9+2865305]\nE       \tGetHandleVerifier [0x0146E78B+3163435]\nE       \tGetHandleVerifier [0x01468441+3138017]\nE       \tGetHandleVerifier [0x011FE0F0+605840]\nE       \t(No symbol) [0x0110A64C]\nE       \t(No symbol) [0x01106638]\nE       \t(No symbol) [0x0110675F]\nE       \t(No symbol) [0x010F8DB7]\nE       \tBaseThreadInitThunk [0x753A6359+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77497B74+228]\nE       \tRtlGetAppContainerNamedObjectPath [0x77497B44+180]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_fill_authorization_form():\n        with allure.step(\"Open registrations form\"):\n            browser.open('https://demoqa.com/automation-practice-form')\n            browser.all('[id^=google_ads][id$=container__]').with_(timeout=10).wait_until(\n                have.size_greater_than_or_equal(3)\n            )\n            browser.all('[id^=google_ads][id$=container__]').perform(command.js.remove)\n    \n        with allure.step(\"Fill form\"):\n            browser.element(\"#firstName\").click().type('Yana')\n            browser.element(\"#lastName\").type('Surname')\n            browser.element(\"#userEmail\").type('test@ya.com')\n            browser.element(\"label[for='gender-radio-2']\").click()\n            browser.element(\"#userNumber\").type('89771452365')\n            browser.element(\"#dateOfBirthInput\").click()\n    \n            browser.element(\".react-datepicker__year-select\").type('1997').click()\n            browser.element('.react-datepicker__month-select').type('January').click()\n            browser.element('[class=\"react-datepicker__day react-datepicker__day--006\"]').click()\n    \n            browser.element('#subjectsInput').type('English').press_enter()\n>           browser.element(\"label[for='hobbies-checkbox-3']\").click()\n\ntest_authorization_form.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\entity.py:533: in click\n    self.wait.for_(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x000001B735B0D6F0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', \"label[for='hobbies-checkbox-3']\")).click\nE                   \nE                   Reason: ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-3\" class=\"custom-control-label\">...</label> is not clickable at point (626, 526). Other element would receive the click: <span>...</span>\nE                     (Session info: chrome=118.0.5993.71)\nE                   Stacktrace:\nE                   \tGetHandleVerifier [0x01174DE3+43907]\nE                   \t(No symbol) [0x01100741]\nE                   \t(No symbol) [0x00FF33ED]\nE                   \t(No symbol) [0x0102B5B1]\nE                   \t(No symbol) [0x0102A0AF]\nE                   \t(No symbol) [0x0102869B]\nE                   \t(No symbol) [0x01027A35]\nE                   \t(No symbol) [0x0101FF9A]\nE                   \t(No symbol) [0x01042B5C]\nE                   \t(No symbol) [0x0101F9D6]\nE                   \t(No symbol) [0x01042DD4]\nE                   \t(No symbol) [0x010555CA]\nE                   \t(No symbol) [0x01042956]\nE                   \t(No symbol) [0x0101E17E]\nE                   \t(No symbol) [0x0101F32D]\nE                   \tGetHandleVerifier [0x01425AF9+2865305]\nE                   \tGetHandleVerifier [0x0146E78B+3163435]\nE                   \tGetHandleVerifier [0x01468441+3138017]\nE                   \tGetHandleVerifier [0x011FE0F0+605840]\nE                   \t(No symbol) [0x0110A64C]\nE                   \t(No symbol) [0x01106638]\nE                   \t(No symbol) [0x0110675F]\nE                   \t(No symbol) [0x010F8DB7]\nE                   \tBaseThreadInitThunk [0x753A6359+25]\nE                   \tRtlGetAppContainerNamedObjectPath [0x77497B74+228]\nE                   \tRtlGetAppContainerNamedObjectPath [0x77497B44+180]\nE                   \nE                   Screenshot: file://C:\\Users\\veryu\\.selene\\screenshots\\1697566592041\\1697566592041.png\nE                   PageSource: file://C:\\Users\\veryu\\.selene\\screenshots\\1697566592041\\1697566592041.html\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "steps": [{"name": "Open registrations form", "status": "passed", "start": 1697566592284, "stop": 1697566608768}, {"name": "Fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', \"label[for='hobbies-checkbox-3']\")).click\n\nReason: ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-3\" class=\"custom-control-label\">...</label> is not clickable at point (626, 526). Other element would receive the click: <span>...</span>\n  (Session info: chrome=118.0.5993.71)\nStacktrace:\n\tGetHandleVerifier [0x01174DE3+43907]\n\t(No symbol) [0x01100741]\n\t(No symbol) [0x00FF33ED]\n\t(No symbol) [0x0102B5B1]\n\t(No symbol) [0x0102A0AF]\n\t(No symbol) [0x0102869B]\n\t(No symbol) [0x01027A35]\n\t(No symbol) [0x0101FF9A]\n\t(No symbol) [0x01042B5C]\n\t(No symbol) [0x0101F9D6]\n\t(No symbol) [0x01042DD4]\n\t(No symbol) [0x010555CA]\n\t(No symbol) [0x01042956]\n\t(No symbol) [0x0101E17E]\n\t(No symbol) [0x0101F32D]\n\tGetHandleVerifier [0x01425AF9+2865305]\n\tGetHandleVerifier [0x0146E78B+3163435]\n\tGetHandleVerifier [0x01468441+3138017]\n\tGetHandleVerifier [0x011FE0F0+605840]\n\t(No symbol) [0x0110A64C]\n\t(No symbol) [0x01106638]\n\t(No symbol) [0x0110675F]\n\t(No symbol) [0x010F8DB7]\n\tBaseThreadInitThunk [0x753A6359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77497B74+228]\n\tRtlGetAppContainerNamedObjectPath [0x77497B44+180]\n\nScreenshot: file://C:\\Users\\veryu\\.selene\\screenshots\\1697566592041\\1697566592041.png\nPageSource: file://C:\\Users\\veryu\\.selene\\screenshots\\1697566592041\\1697566592041.html\n\n", "trace": "  File \"C:\\Users\\veryu\\PycharmProjects\\qa-guru-python-7-12\\tests\\test_authorization_form.py\", line 27, in test_fill_authorization_form\n    browser.element(\"label[for='hobbies-checkbox-3']\").click()\n  File \"C:\\Users\\veryu\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\entity.py\", line 533, in click\n    self.wait.for_(\n  File \"C:\\Users\\veryu\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\wait.py\", line 143, in for_\n    return self._decorator(self)(logic)(fn)\n  File \"C:\\Users\\veryu\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selene\\core\\wait.py\", line 141, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1697566608768, "stop": 1697566615826}], "start": 1697566592284, "stop": 1697566615834, "uuid": "c28cba67-eaf0-4a2b-9636-0ab33dbd3359", "historyId": "c6191478d21a2a9096a504f286d79a20", "testCaseId": "5659f363673c44f8dc28dd86b5436947", "fullName": "tests.test_authorization_form#test_fill_authorization_form", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization_form"}, {"name": "host", "value": "DESKTOP-S15PP4S"}, {"name": "thread", "value": "6532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization_form"}]}